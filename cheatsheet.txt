Node.js Module

"bisa di tambahkan melalui NPM (Node Package Module)"
https://www.npmjs.com/
example add upper-case module
C:\Users\Your Name>npm install upper-case

cara menambahkan module di project 
var namavariabel = require('namamodul');


Nama Module         Dekripsi
assert              Provides a set of assertion tests
buffer              To handle binary data
child_process       To run a child process
cluster             To split a single Node process into multiple processes
crypto              To handle OpenSSL cryptographic functions
dgram               Provides implementation of UDP datagram sockets
dns                 To do DNS lookups and name resolution functions
domain              Deprecated. To handle unhandled errors
events              To handle events
fs                  To handle the file system
http                To make Node.js act as an HTTP server
https               To make Node.js act as an HTTPS server.
net                 To create servers and clients
os                  Provides information about the operation system
path                To handle file paths
punycode            Deprecated. A character encoding scheme
querystring         To handle URL query strings
readline            To handle readable streams one line at the time
stream              To handle streaming data
string_decoder      To decode buffer objects into strings
timers              To execute a function after a given number of milliseconds
tls                 To implement TLS and SSL protocols
tty                 Provides classes used by a text terminal
url                 To parse URL strings
util                To access utility functions
v8
vm                  To compile JavaScript code in a virtual machine
zlib                To compress or decompress files


+---------------------------------------------------------------------------------------------------------------+
Create First localhost server
use the require()
sample :  var http = require('http');

Now your application has access to the HTTP module, and is able to create a server:
http.createServer(function (req, res) {
    res.writeHead(200, {'Content-Type': 'text/html'});
    res.end('Hello World!');
}).listen(8080);

+-----------------------------------------------------------------------------------------------------------------+

Create Your Own Modules
You can create your own modules, and easily include them in your applications.
The following example creates a module that returns a date and time object:

Example
Create a module that returns the current date and time:

exports.myDateTime = function () {
    return Date();
};
Use the exports keyword to make properties and methods available outside the module file.
Save the code above in a file called "myfirstmodule.js"

+------------------------------------------------------------------------------------------------------------------+

Include Your Own Module
Now you can include and use the module in any of your Node.js files.
Example
Use the module "myfirstmodule" in a Node.js file:

var http = require('http');
var dt = require('./myfirstmodule');

http.createServer(function (req, res) {
    res.writeHead(200, {'Content-Type': 'text/html'});
    res.write("The date and time are currently: " + dt.myDateTime());
    res.end();
}).listen(8080);

+---------------------------------------------------------------------------------------------------------------------+

Add an HTTP Header
If the response from the HTTP server is supposed to be displayed as HTML, you should include an HTTP header with the correct content type:
Example
var http = require('http');
http.createServer(function (req, res) {
  res.writeHead(200, {'Content-Type': 'text/html'});
  res.write('Hello World!');
  res.end();
}).listen(8080);

The first argument of the res.writeHead() method is the status code, 200 means that all is OK, the second argument is an object containing the response headers.

+---------------------------------------------------------------------------------------------------------------------+


Read the Query String

The function passed into the http.createServer() has a req argument that represents the request from the client, as an object (http.IncomingMessage object).

This object has a property called "url" which holds the part of the url that comes after the domain name:
demo_http_url.js
var http = require('http');
http.createServer(function (req, res) {
    res.writeHead(200, {'Content-Type': 'text/html'});
    res.write(req.url);
    res.end();
}).listen(8080);

+---------------------------------------------------------------------------------------------------------------------+

Split the Query StringThere are built-in modules to easily split the query string into readable parts, such as the URL module.

Example
Split the query string into readable parts:
var http = require('http');
var url = require('url');

http.createServer(function (req, res) {
  res.writeHead(200, {'Content-Type': 'text/html'});
  var q = url.parse(req.url, true).query;
  var txt = q.year + " " + q.month;
  res.end(txt);
}).listen(8080);

+---------------------------------------------------------------------------------------------------------------------+

Node.js as a File ServerThe Node.js file system module allow you to work with the file system on your computer.

To include the File System module, use the require() method:

var fs = require('fs');
Common use for the File System module:

	* Read files



Example

The fs.appendFile() method appends specified content to a file. If the file does not exist, the file will be created:
Create a new file using the appendFile() method:
var fs = require('fs');

fs.appendFile('mynewfile1.txt', 'Hello content!', function (err) {
  if (err) throw err;
  console.log('Saved!');
});

+------------------------------------------------------+
The fs.open() method takes a "flag" as the second argument, if the flag is "w" for "writing", the specified file is opened for writing. If the file does not exist, an empty file is created:
ExampleCreate a new, empty file using the open() method:
var fs = require('fs');

fs.open('mynewfile2.txt', 'w', function (err, file) {
  if (err) throw err;
  console.log('Saved!');
});

+------------------------------------------------------+
fs.writeFile() method replaces the specified file and content if it exists. If the file does not exists a new file, containing the specified content, will be created:
ExampleCreate a new file using the writeFile() method:
var fs = require('fs');

fs.writeFile('mynewfile3.txt', 'Hello content!', function (err) {
  if (err) throw err;
  console.log('Saved!');
});

	* Create files

var fs = require('fs');

fs.appendFile('mynewfile1.txt', 'Hello content!', function (err) {
  if (err) throw err;
  console.log('Saved!');
});

	* Update files

The File System module has methods for updating files:

- fs.appendFile()
- fs.writeFile()

The fs.appendFile() method appends the specified content at the end of the specified file:

Example

Append "This is my text." to the end of the file "mynewfile1.txt":

var fs = require('fs');

fs.appendFile('mynewfile1.txt', ' This is my text.', function (err) {
  if (err) throw err;
  console.log('Updated!');
});

The fs.writeFile() method replaces the specified file and content:

Example

Replace the content of the file "mynewfile3.txt":

var fs = require('fs');

fs.writeFile('mynewfile3.txt', 'This is my text', function (err) {
  if (err) throw err;
  console.log('Replaced!');
});


	* Delete files

The fs.unlink() method deletes the specified file:

Example

Delete "mynewfile2.txt":

var fs = require('fs');

fs.unlink('mynewfile2.txt', function (err) {
  if (err) throw err;
  console.log('File deleted!');
});


	* Rename files


Rename "mynewfile1.txt" to "myrenamedfile.txt":

var fs = require('fs');

fs.rename('mynewfile1.txt', 'myrenamedfile.txt', function (err) {
  if (err) throw err;
  console.log('File Renamed!');
});


+---------------------------------------------------------------------------------------------------------------------+

The Built-in URL Module

The URL module splits up a web address into readable parts.
To include the URL module, use the require() method:
var url = require('url');
Parse an address with the url.parse() method, and it will return a URL object with each part of the address as properties:

Example
Split a web address into readable parts:
var url = require('url');
var adr = 'http://localhost:8080/default.htm?year=2017&month=february';
var q = url.parse(adr, true);

console.log(q.host); //returns 'localhost:8080'
console.log(q.pathname); //returns '/default.htm'
console.log(q.search); //returns '?year=2017&month=february'

var qdata = q.query; //returns an object: { year: 2017, month: 'february' }
console.log(qdata.month); //returns 'february'

+---------------------------------------------------------------------------------------------------------------------+

summer.html
<!DOCTYPE html>
<html>
<body>
<h1>Summer</h1>
<p>I love the sun!</p>
</body>
</html>

winter.html
<!DOCTYPE html>
<html>
<body>
<h1>Winter</h1>
<p>I love the snow!</p>
</body>
</html>

demo_filserver.js
var http = require('http');
var url = require('url');
var fs = require('fs');

http.createServer(function (req, res) {
  var q = url.parse(req.url, true);
  var filename = "." + q.pathname;
  fs.readFile(filename, function(err, data) {
    if (err) {
      res.writeHead(404, {'Content-Type': 'text/html'});
      return res.end("404 Not Found");
    }
    res.writeHead(200, {'Content-Type': 'text/html'});
    res.write(data);
    return res.end();
  });
}).listen(8080);


Remember to initiate the file:

Initiate demo_fileserver.js:
C:\Users\Your Name>node demo_fileserver.js

if you have followed the same steps on your computer, you should see two different results when opening these two addresses:
http://localhost:8080/summer.html
http://localhost:8080/winter.html

+---------------------------------------------------------------------------------------------------------------------+


Events in Node.js
Every action on a computer is an event. Like when a connection is made or a file is opened.
Objects in Node.js can fire events, like the readStream object fires events when opening and closing a file:

Example
var fs = require('fs');
var rs = fs.createReadStream('./demofile.txt');
//rs.on is like when
rs.on('open', function () {
  console.log('The file is open');
});

+---------------------------------------------------------------------------------------------------------------------+

Events Module

Node.js have a built-in module, called "Events", where you can create-, fire-, and listen for- your own events.
To include the built-in Events module use the require() method. In addition, all event properties and methods are an instance of an EventEmitter object. To be able to access these properties and methods, create an EventEmitter object:
var events = require('events');
var eventEmitter = new events.EventEmitter();
 example :

var events = require('events');
var eventEmitter = new events.EventEmitter();

//Create an event handler:
var myEventHandler = function () {
  console.log('I hear a scream!');
}

//Assign the event handler to an event:
eventEmitter.on('scream', myEventHandler);

//Fire the 'scream' event:
eventEmitter.emit('scream');

You can assign event handlers to your own events with the EventEmitter object.
In the example below we have created a function that will be executed when a "scream" event is fired.
To fire an event, use the emit() method.

+---------------------------------------------------------------------------------------------------------------------+


Node.js Upload Files
The Formidable Module

There is a very good module for working with file uploads, called "Formidable".
The Formidable module can be downloaded and installed using NPM:

var formidable = require('formidable');


Upload Files
Now you are ready to make a web page in Node.js that lets the user upload files to your computer:

Step 1: Create an Upload Form
Create a Node.js file that writes an HTML form, with an upload field:

Example :
var http = require('http');

http.createServer(function (req, res) {
  res.writeHead(200, {'Content-Type': 'text/html'});
  res.write('<form action="fileupload" method="post" enctype="multipart/form-data">');
  res.write('<input type="file" name="filetoupload"><br>');
  res.write('<input type="submit">');
  res.write('</form>');
  return res.end();
}).listen(8080);

Step 2: Parse the Uploaded File

Include the Formidable module to be able to parse the uploaded file once it reaches the server.
When the file is uploaded and parsed, it gets placed on a temporary folder on your computer.

Example :
var http = require('http');
var formidable = require('formidable');

http.createServer(function (req, res) {
  if (req.url == '/fileupload') {
    var form = new formidable.IncomingForm();
    form.parse(req, function (err, fields, files) {
      res.write('File uploaded');
      res.end();
    });
  } else {
    res.writeHead(200, {'Content-Type': 'text/html'});
    res.write('<form action="fileupload" method="post" enctype="multipart/form-data">');
    res.write('<input type="file" name="filetoupload"><br>');
    res.write('<input type="submit">');
    res.write('</form>');
    return res.end();
  }
}).listen(8080);


Step 3: Save the File

When a file is successfully uploaded to the server, it is placed on a temporary folder.
The path to this directory can be found in the "files" object, passed as the second argument in the parse() method's callback function.

To move the file to the folder of your choice, use the File System module, and rename the file:

Example :
var http = require('http');
var formidable = require('formidable');
var fs = require('fs');

http.createServer(function (req, res) {
  if (req.url == '/fileupload') {
    var form = new formidable.IncomingForm();
    form.parse(req, function (err, fields, files) {
      var oldpath = files.filetoupload.path;
      var newpath = 'C:/Users/Your Name/' + files.filetoupload.name;
      fs.rename(oldpath, newpath, function (err) {
        if (err) throw err;
        res.write('File uploaded and moved!');
        res.end();
      });
 });
  } else {
    res.writeHead(200, {'Content-Type': 'text/html'});
    res.write('<form action="fileupload" method="post" enctype="multipart/form-data">');
    res.write('<input type="file" name="filetoupload"><br>');
    res.write('<input type="submit">');
    res.write('</form>');
    return res.end();
  }
}).listen(8080);

